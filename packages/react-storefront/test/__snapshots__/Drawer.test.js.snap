// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Drawer accepts a className prop 1`] = `
<WithStyles(inject-Drawer) className="myClassName" onRequestClose={[Function]}>
  <inject-Drawer className="myClassName" onRequestClose={[Function]} classes={{...}}>
    <Drawer className="myClassName" onRequestClose={[Function]} classes={{...}} amp={[undefined]} ampStateId={[undefined]} showCloseButton={true} autoAdjustBodyPadding={false} closeButtonProps={{...}}>
      <WithStyles(Drawer) anchor="bottom" classes={{...}} amp-bind={{...}} open={[undefined]} variant={[undefined]} className="myClassName">
        <Drawer anchor="bottom" amp-bind={{...}} open={false} variant="temporary" className="myClassName" theme={{...}} classes={{...}} elevation={16} transitionDuration={{...}}>
          <WithStyles(Modal) BackdropProps={{...}} className="MuiDrawer-root-5 MuiDrawer-modal-16 myClassName" open={false} onClose={[undefined]} amp-bind={{...}}>
            <Modal BackdropProps={{...}} className="MuiDrawer-root-5 MuiDrawer-modal-16 myClassName" open={false} onClose={[undefined]} amp-bind={{...}} classes={{...}} BackdropComponent={[Function: WithStyles]} disableAutoFocus={false} disableBackdropClick={false} disableEnforceFocus={false} disableEscapeKeyDown={false} disablePortal={false} disableRestoreFocus={false} hideBackdrop={false} keepMounted={false} manager={{...}} />
          </WithStyles(Modal)>
        </Drawer>
      </WithStyles(Drawer)>
    </Drawer>
  </inject-Drawer>
</WithStyles(inject-Drawer)>
`;

exports[`Drawer accepts a paper class 1`] = `
<WithStyles(inject-Drawer) classes={{...}} onRequestClose={[Function]}>
  <inject-Drawer onRequestClose={[Function]} classes={{...}}>
    <Drawer onRequestClose={[Function]} classes={{...}} amp={[undefined]} ampStateId={[undefined]} showCloseButton={true} autoAdjustBodyPadding={false} closeButtonProps={{...}}>
      <WithStyles(Drawer) anchor="bottom" classes={{...}} amp-bind={{...}} open={[undefined]} variant={[undefined]}>
        <Drawer anchor="bottom" amp-bind={{...}} open={false} variant="temporary" theme={{...}} classes={{...}} elevation={16} transitionDuration={{...}}>
          <WithStyles(Modal) BackdropProps={{...}} className="MuiDrawer-root-5 MuiDrawer-modal-16" open={false} onClose={[undefined]} amp-bind={{...}}>
            <Modal BackdropProps={{...}} className="MuiDrawer-root-5 MuiDrawer-modal-16" open={false} onClose={[undefined]} amp-bind={{...}} classes={{...}} BackdropComponent={[Function: WithStyles]} disableAutoFocus={false} disableBackdropClick={false} disableEnforceFocus={false} disableEscapeKeyDown={false} disablePortal={false} disableRestoreFocus={false} hideBackdrop={false} keepMounted={false} manager={{...}} />
          </WithStyles(Modal)>
        </Drawer>
      </WithStyles(Drawer)>
    </Drawer>
  </inject-Drawer>
</WithStyles(inject-Drawer)>
`;

exports[`Drawer sets up amp-bind when ampBindClosed is set 1`] = `
<Provider app={{...}}>
  <inject-AmpState id="myState">
    <AmpState id="myState" amp={true} initialState={{...}}>
      <Provider ampStateId="myState">
        <HelmetWrapper defer={true} encodeSpecialCharacters={true}>
          <SideEffect(NullComponent) defer={true} encodeSpecialCharacters={true} script={{...}}>
            <NullComponent defer={true} encodeSpecialCharacters={true} script={{...}} />
          </SideEffect(NullComponent)>
        </HelmetWrapper>
        <amp-state id="myState">
          <script type="application/json" dangerouslySetInnerHTML={{...}} />
        </amp-state>
        <WithStyles(inject-Drawer) ampBindClosed="closed" onRequestClose={[Function]}>
          <inject-Drawer ampBindClosed="closed" onRequestClose={[Function]} classes={{...}}>
            <Drawer ampBindClosed="closed" onRequestClose={[Function]} classes={{...}} amp={true} ampStateId="myState" showCloseButton={true} autoAdjustBodyPadding={false} closeButtonProps={{...}}>
              <WithStyles(Drawer) anchor="bottom" classes={{...}} amp-bind="class=>myState.closed ? \\'RSFDrawer-ampClosed-4\\' : null" open={[undefined]} variant={[undefined]}>
                <Drawer anchor="bottom" amp-bind="class=>myState.closed ? \\'RSFDrawer-ampClosed-4\\' : null" open={false} variant="temporary" theme={{...}} classes={{...}} elevation={16} transitionDuration={{...}}>
                  <WithStyles(Modal) BackdropProps={{...}} className="MuiDrawer-root-5 MuiDrawer-modal-16" open={false} onClose={[undefined]} amp-bind="class=>myState.closed ? \\'RSFDrawer-ampClosed-4\\' : null">
                    <Modal BackdropProps={{...}} className="MuiDrawer-root-5 MuiDrawer-modal-16" open={false} onClose={[undefined]} amp-bind="class=>myState.closed ? \\'RSFDrawer-ampClosed-4\\' : null" classes={{...}} BackdropComponent={[Function: WithStyles]} disableAutoFocus={false} disableBackdropClick={false} disableEnforceFocus={false} disableEscapeKeyDown={false} disablePortal={false} disableRestoreFocus={false} hideBackdrop={false} keepMounted={false} manager={{...}} />
                  </WithStyles(Modal)>
                </Drawer>
              </WithStyles(Drawer)>
            </Drawer>
          </inject-Drawer>
        </WithStyles(inject-Drawer)>
      </Provider>
    </AmpState>
  </inject-AmpState>
</Provider>
`;

exports[`Drawer spreads props to the underlying MuiDrawer 1`] = `<inject-Drawer open={true} onRequestClose={[Function]} classes={{...}} />`;

exports[`Drawer uses a div for title 1`] = `
<WithStyles(inject-Drawer) open={true} title="Title" onRequestClose={[Function]}>
  <inject-Drawer open={true} title="Title" onRequestClose={[Function]} classes={{...}}>
    <Drawer open={true} title="Title" onRequestClose={[Function]} classes={{...}} amp={[undefined]} ampStateId={[undefined]} showCloseButton={true} autoAdjustBodyPadding={false} closeButtonProps={{...}}>
      <WithStyles(Drawer) anchor="bottom" classes={{...}} amp-bind={{...}} open={true} variant={[undefined]}>
        <Drawer anchor="bottom" amp-bind={{...}} open={true} variant="temporary" theme={{...}} classes={{...}} elevation={16} transitionDuration={{...}}>
          <WithStyles(Modal) BackdropProps={{...}} className="MuiDrawer-root-5 MuiDrawer-modal-16" open={true} onClose={[undefined]} amp-bind={{...}}>
            <Modal BackdropProps={{...}} className="MuiDrawer-root-5 MuiDrawer-modal-16" open={true} onClose={[undefined]} amp-bind={{...}} classes={{...}} BackdropComponent={[Function: WithStyles]} disableAutoFocus={false} disableBackdropClick={false} disableEnforceFocus={false} disableEscapeKeyDown={false} disablePortal={false} disableRestoreFocus={false} hideBackdrop={false} keepMounted={false} manager={{...}}>
              <Portal container={[undefined]} disablePortal={false} onRendered={[Function]}>
                <Portal containerInfo={{...}}>
                  <div className="MuiModal-root-17 MuiDrawer-root-5 MuiDrawer-modal-16" amp-bind={{...}}>
                    <WithStyles(Backdrop) open={true} onClick={[Function]} transitionDuration={{...}}>
                      <Backdrop open={true} onClick={[Function]} transitionDuration={{...}} classes={{...}} invisible={false}>
                        <WithTheme(Fade) in={true} timeout={{...}} onClick={[Function]}>
                          <Fade theme={{...}} in={true} timeout={{...}} onClick={[Function]}>
                            <Transition appear={true} onEnter={[Function]} onExit={[Function]} in={true} timeout={{...}} onClick={[Function]} mountOnEnter={false} unmountOnExit={false} enter={true} exit={true} onEntering={[Function: noop]} onEntered={[Function: noop]} onExiting={[Function: noop]} onExited={[Function: noop]}>
                              <div className="MuiBackdrop-root-19" aria-hidden="true" style={{...}} onClick={[Function]} />
                            </Transition>
                          </Fade>
                        </WithTheme(Fade)>
                      </Backdrop>
                    </WithStyles(Backdrop)>
                    <RootRef rootRef={[Function]}>
                      <WithTheme(Slide) in={true} direction="up" timeout={{...}} appear={false} onExited={[Function: chainedFunction]} role="document" tabIndex="-1">
                        <Slide theme={{...}} in={true} direction="up" timeout={{...}} appear={false} onExited={[Function: chainedFunction]} role="document" tabIndex="-1">
                          <EventListener target="window" onResize={[Function: debounced]}>
                            <Transition onEnter={[Function]} onEntering={[Function]} onExit={[Function]} onExited={[Function]} appear={false} style={{...}} in={true} direction="up" timeout={{...}} role="document" tabIndex="-1" mountOnEnter={false} unmountOnExit={false} enter={true} exit={true} onEntered={[Function: noop]} onExiting={[Function: noop]}>
                              <WithStyles(Paper) elevation={16} square={true} className="MuiDrawer-paper-7 RSFDrawer-paper-2 MuiDrawer-paperAnchorBottom-11" style={{...}} direction="up" role="document" tabIndex="-1">
                                <Paper elevation={16} square={true} className="MuiDrawer-paper-7 RSFDrawer-paper-2 MuiDrawer-paperAnchorBottom-11" style={{...}} direction="up" role="document" tabIndex="-1" classes={{...}} component="div">
                                  <div className="MuiPaper-root-21 MuiPaper-elevation16-39 MuiDrawer-paper-7 RSFDrawer-paper-2 MuiDrawer-paperAnchorBottom-11" style={{...}} direction="up" role="document" tabIndex="-1">
                                    <div>
                                      <div className="RSFDrawer-title-3">
                                        <WithStyles(Typography) variant="title" component="div">
                                          <Typography variant="title" component="div" theme={{...}} classes={{...}} align="inherit" color="default" gutterBottom={false} headlineMapping={{...}} noWrap={false} paragraph={false}>
                                            <div className="MuiTypography-root-48 MuiTypography-title-54">
                                              Title
                                            </div>
                                          </Typography>
                                        </WithStyles(Typography)>
                                      </div>
                                      <WithStyles(Button) variant="fab" color="primary" className="RSFDrawer-closeButton-1" onClick={[Function]} style={{...}} on={{...}}>
                                        <Button variant="fab" color="primary" className="RSFDrawer-closeButton-1" onClick={[Function]} style={{...}} on={{...}} classes={{...}} component="button" disabled={false} disableFocusRipple={false} fullWidth={false} mini={false} size="medium" type="button">
                                          <WithStyles(ButtonBase) className="MuiButton-root-83 MuiButton-fab-100 MuiButton-contained-94 MuiButton-containedPrimary-95 MuiButton-raised-97 MuiButton-raisedPrimary-98 RSFDrawer-closeButton-1" disabled={false} focusRipple={true} focusVisibleClassName="MuiButton-focusVisible-102" onClick={[Function]} style={{...}} on={{...}} component="button" type="button">
                                            <ButtonBase className="MuiButton-root-83 MuiButton-fab-100 MuiButton-contained-94 MuiButton-containedPrimary-95 MuiButton-raised-97 MuiButton-raisedPrimary-98 RSFDrawer-closeButton-1" disabled={false} focusRipple={true} focusVisibleClassName="MuiButton-focusVisible-102" onClick={[Function]} style={{...}} on={{...}} component="button" type="button" classes={{...}} centerRipple={false} disableRipple={false} disableTouchRipple={false} tabIndex="0">
                                              <button className="MuiButtonBase-root-109 MuiButton-root-83 MuiButton-fab-100 MuiButton-contained-94 MuiButton-containedPrimary-95 MuiButton-raised-97 MuiButton-raisedPrimary-98 RSFDrawer-closeButton-1" onBlur={[Function]} onFocus={[Function]} onKeyDown={[Function]} onKeyUp={[Function]} onMouseDown={[Function]} onMouseLeave={[Function]} onMouseUp={[Function]} onTouchEnd={[Function]} onTouchMove={[Function]} onTouchStart={[Function]} tabIndex="0" type="button" disabled={false} onClick={[Function]} style={{...}} on={{...}}>
                                                <span className="MuiButton-label-84">
                                                  <pure(CloseIcon)>
                                                    <CloseIcon>
                                                      <WithStyles(SvgIcon)>
                                                        <SvgIcon classes={{...}} color="inherit" component="svg" fontSize="default" viewBox="0 0 24 24">
                                                          <svg className="MuiSvgIcon-root-112" focusable="false" viewBox="0 0 24 24" color={[undefined]} aria-hidden="true" role="presentation">
                                                            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" />
                                                            <path fill="none" d="M0 0h24v24H0z" />
                                                          </svg>
                                                        </SvgIcon>
                                                      </WithStyles(SvgIcon)>
                                                    </CloseIcon>
                                                  </pure(CloseIcon)>
                                                </span>
                                                <NoSsr defer={false} fallback={{...}}>
                                                  <WithStyles(TouchRipple) innerRef={[Function]} center={false}>
                                                    <TouchRipple center={false} classes={{...}}>
                                                      <TransitionGroup component="span" enter={true} exit={true} className="MuiTouchRipple-root-121" childFactory={[Function: childFactory]}>
                                                        <span className="MuiTouchRipple-root-121" />
                                                      </TransitionGroup>
                                                    </TouchRipple>
                                                  </WithStyles(TouchRipple)>
                                                </NoSsr>
                                              </button>
                                            </ButtonBase>
                                          </WithStyles(ButtonBase)>
                                        </Button>
                                      </WithStyles(Button)>
                                    </div>
                                  </div>
                                </Paper>
                              </WithStyles(Paper)>
                            </Transition>
                          </EventListener>
                        </Slide>
                      </WithTheme(Slide)>
                    </RootRef>
                  </div>
                </Portal>
              </Portal>
            </Modal>
          </WithStyles(Modal)>
        </Drawer>
      </WithStyles(Drawer)>
    </Drawer>
  </inject-Drawer>
</WithStyles(inject-Drawer)>
`;
