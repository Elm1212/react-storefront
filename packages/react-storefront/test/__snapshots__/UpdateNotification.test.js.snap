// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UpdateNotification should accept a custom message 1`] = `
<WithStyles(UpdateNotification) message="Update available">
  <UpdateNotification message="Update available" classes={{...}} reloadButtonText="RELOAD">
    <WithStyles(Snackbar) open={true} autoHideDuration={6000} onClose={[Function]} message="Update available" action={{...}}>
      <Snackbar open={true} autoHideDuration={6000} onClose={[Function]} message="Update available" action={{...}} classes={{...}} anchorOrigin={{...}} disableWindowBlurListener={false} TransitionComponent={[Function: WithTheme]} transitionDuration={{...}}>
        <ClickAwayListener onClickAway={[Function]} mouseEvent="onMouseUp" touchEvent="onTouchEnd">
          <div className="MuiSnackbar-root-2 MuiSnackbar-anchorOriginBottomCenter-4" onMouseEnter={[Function]} onMouseLeave={[Function]}>
            <EventListener target="window" onFocus={[Function]} onBlur={[Function]} />
            <WithTheme(Slide) appear={true} in={true} onEnter={[undefined]} onEntered={[undefined]} onEntering={[undefined]} onExit={[undefined]} onExited={[Function: chainedFunction]} onExiting={[undefined]} timeout={{...}} direction="up">
              <Slide theme={{...}} appear={true} in={true} onEnter={[undefined]} onEntered={[undefined]} onEntering={[undefined]} onExit={[undefined]} onExited={[Function: chainedFunction]} onExiting={[undefined]} timeout={{...}} direction="up">
                <EventListener target="window" onResize={[Function: debounced]}>
                  <Transition onEnter={[Function]} onEntering={[Function]} onExit={[Function]} onExited={[Function]} appear={true} style={{...}} in={true} onEntered={[Function: noop]} onExiting={[Function: noop]} timeout={{...}} direction="up" mountOnEnter={false} unmountOnExit={false} enter={true} exit={true}>
                    <WithStyles(SnackbarContent) message="Update available" action={{...}} style={{...}} direction="up">
                      <SnackbarContent message="Update available" action={{...}} style={{...}} direction="up" classes={{...}}>
                        <WithStyles(Paper) component={[Function: WithStyles]} headlineMapping={{...}} role="alertdialog" square={true} elevation={6} className="MuiSnackbarContent-root-9" style={{...}} direction="up">
                          <Paper component={[Function: WithStyles]} headlineMapping={{...}} role="alertdialog" square={true} elevation={6} className="MuiSnackbarContent-root-9" style={{...}} direction="up" classes={{...}}>
                            <WithStyles(Typography) className="MuiPaper-root-12 MuiPaper-elevation6-20 MuiSnackbarContent-root-9" headlineMapping={{...}} role="alertdialog" style={{...}} direction="up">
                              <Typography className="MuiPaper-root-12 MuiPaper-elevation6-20 MuiSnackbarContent-root-9" headlineMapping={{...}} role="alertdialog" style={{...}} direction="up" theme={{...}} classes={{...}} align="inherit" color="default" gutterBottom={false} noWrap={false} paragraph={false}>
                                <div className="MuiTypography-root-39 MuiTypography-body1-48 MuiPaper-root-12 MuiPaper-elevation6-20 MuiSnackbarContent-root-9" role="alertdialog" style={{...}} direction="up">
                                  <div className="MuiSnackbarContent-message-10">
                                    Update available
                                  </div>
                                  <div className="MuiSnackbarContent-action-11">
                                    <WithStyles(Button) color="secondary" size="small" onClick={[Function]}>
                                      <Button color="secondary" size="small" onClick={[Function]} classes={{...}} component="button" disabled={false} disableFocusRipple={false} fullWidth={false} mini={false} type="button" variant="text">
                                        <WithStyles(ButtonBase) className="MuiButton-root-74 MuiButton-text-76 MuiButton-textSecondary-78 MuiButton-flat-79 MuiButton-flatSecondary-81 MuiButton-sizeSmall-97" disabled={false} focusRipple={true} focusVisibleClassName="MuiButton-focusVisible-93" onClick={[Function]} component="button" type="button">
                                          <ButtonBase className="MuiButton-root-74 MuiButton-text-76 MuiButton-textSecondary-78 MuiButton-flat-79 MuiButton-flatSecondary-81 MuiButton-sizeSmall-97" disabled={false} focusRipple={true} focusVisibleClassName="MuiButton-focusVisible-93" onClick={[Function]} component="button" type="button" classes={{...}} centerRipple={false} disableRipple={false} disableTouchRipple={false} tabIndex="0">
                                            <button className="MuiButtonBase-root-100 MuiButton-root-74 MuiButton-text-76 MuiButton-textSecondary-78 MuiButton-flat-79 MuiButton-flatSecondary-81 MuiButton-sizeSmall-97" onBlur={[Function]} onFocus={[Function]} onKeyDown={[Function]} onKeyUp={[Function]} onMouseDown={[Function]} onMouseLeave={[Function]} onMouseUp={[Function]} onTouchEnd={[Function]} onTouchMove={[Function]} onTouchStart={[Function]} tabIndex="0" type="button" disabled={false} onClick={[Function]}>
                                              <span className="MuiButton-label-75">
                                                RELOAD
                                              </span>
                                              <NoSsr defer={false} fallback={{...}}>
                                                <WithStyles(TouchRipple) innerRef={[Function]} center={false}>
                                                  <TouchRipple center={false} classes={{...}}>
                                                    <TransitionGroup component="span" enter={true} exit={true} className="MuiTouchRipple-root-118" childFactory={[Function: childFactory]}>
                                                      <span className="MuiTouchRipple-root-118" />
                                                    </TransitionGroup>
                                                  </TouchRipple>
                                                </WithStyles(TouchRipple)>
                                              </NoSsr>
                                            </button>
                                          </ButtonBase>
                                        </WithStyles(ButtonBase)>
                                      </Button>
                                    </WithStyles(Button)>
                                    <WithStyles(IconButton) aria-label="Close" color="inherit" className="RSFUpdateNotification-close-1" onClick={[Function]}>
                                      <IconButton aria-label="Close" color="inherit" className="RSFUpdateNotification-close-1" onClick={[Function]} classes={{...}} disabled={false}>
                                        <WithStyles(ButtonBase) className="MuiIconButton-root-103 MuiIconButton-colorInherit-104 RSFUpdateNotification-close-1" centerRipple={true} focusRipple={true} disabled={false} aria-label="Close" onClick={[Function]}>
                                          <ButtonBase className="MuiIconButton-root-103 MuiIconButton-colorInherit-104 RSFUpdateNotification-close-1" centerRipple={true} focusRipple={true} disabled={false} aria-label="Close" onClick={[Function]} classes={{...}} component="button" disableRipple={false} disableTouchRipple={false} tabIndex="0" type="button">
                                            <button className="MuiButtonBase-root-100 MuiIconButton-root-103 MuiIconButton-colorInherit-104 RSFUpdateNotification-close-1" onBlur={[Function]} onFocus={[Function]} onKeyDown={[Function]} onKeyUp={[Function]} onMouseDown={[Function]} onMouseLeave={[Function]} onMouseUp={[Function]} onTouchEnd={[Function]} onTouchMove={[Function]} onTouchStart={[Function]} tabIndex="0" type="button" disabled={false} aria-label="Close" onClick={[Function]}>
                                              <span className="MuiIconButton-label-108">
                                                <pure(CloseIcon)>
                                                  <CloseIcon>
                                                    <WithStyles(SvgIcon)>
                                                      <SvgIcon classes={{...}} color="inherit" component="svg" fontSize="default" viewBox="0 0 24 24">
                                                        <svg className="MuiSvgIcon-root-109" focusable="false" viewBox="0 0 24 24" color={[undefined]} aria-hidden="true" role="presentation">
                                                          <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" />
                                                          <path fill="none" d="M0 0h24v24H0z" />
                                                        </svg>
                                                      </SvgIcon>
                                                    </WithStyles(SvgIcon)>
                                                  </CloseIcon>
                                                </pure(CloseIcon)>
                                              </span>
                                              <NoSsr defer={false} fallback={{...}}>
                                                <WithStyles(TouchRipple) innerRef={[Function]} center={true}>
                                                  <TouchRipple center={true} classes={{...}}>
                                                    <TransitionGroup component="span" enter={true} exit={true} className="MuiTouchRipple-root-118" childFactory={[Function: childFactory]}>
                                                      <span className="MuiTouchRipple-root-118" />
                                                    </TransitionGroup>
                                                  </TouchRipple>
                                                </WithStyles(TouchRipple)>
                                              </NoSsr>
                                            </button>
                                          </ButtonBase>
                                        </WithStyles(ButtonBase)>
                                      </IconButton>
                                    </WithStyles(IconButton)>
                                  </div>
                                </div>
                              </Typography>
                            </WithStyles(Typography)>
                          </Paper>
                        </WithStyles(Paper)>
                      </SnackbarContent>
                    </WithStyles(SnackbarContent)>
                  </Transition>
                </EventListener>
              </Slide>
            </WithTheme(Slide)>
          </div>
          <EventListener target="document" onMouseUp={[Function]} onTouchEnd={[Function]} />
        </ClickAwayListener>
      </Snackbar>
    </WithStyles(Snackbar)>
  </UpdateNotification>
</WithStyles(UpdateNotification)>
`;

exports[`UpdateNotification should accept custom text for the reload button 1`] = `
<WithStyles(UpdateNotification) reloadButtonText="REFRESH">
  <UpdateNotification reloadButtonText="REFRESH" classes={{...}} message="An new version of this app is available.">
    <WithStyles(Snackbar) open={true} autoHideDuration={6000} onClose={[Function]} message="An new version of this app is available." action={{...}}>
      <Snackbar open={true} autoHideDuration={6000} onClose={[Function]} message="An new version of this app is available." action={{...}} classes={{...}} anchorOrigin={{...}} disableWindowBlurListener={false} TransitionComponent={[Function: WithTheme]} transitionDuration={{...}}>
        <ClickAwayListener onClickAway={[Function]} mouseEvent="onMouseUp" touchEvent="onTouchEnd">
          <div className="MuiSnackbar-root-2 MuiSnackbar-anchorOriginBottomCenter-4" onMouseEnter={[Function]} onMouseLeave={[Function]}>
            <EventListener target="window" onFocus={[Function]} onBlur={[Function]} />
            <WithTheme(Slide) appear={true} in={true} onEnter={[undefined]} onEntered={[undefined]} onEntering={[undefined]} onExit={[undefined]} onExited={[Function: chainedFunction]} onExiting={[undefined]} timeout={{...}} direction="up">
              <Slide theme={{...}} appear={true} in={true} onEnter={[undefined]} onEntered={[undefined]} onEntering={[undefined]} onExit={[undefined]} onExited={[Function: chainedFunction]} onExiting={[undefined]} timeout={{...}} direction="up">
                <EventListener target="window" onResize={[Function: debounced]}>
                  <Transition onEnter={[Function]} onEntering={[Function]} onExit={[Function]} onExited={[Function]} appear={true} style={{...}} in={true} onEntered={[Function: noop]} onExiting={[Function: noop]} timeout={{...}} direction="up" mountOnEnter={false} unmountOnExit={false} enter={true} exit={true}>
                    <WithStyles(SnackbarContent) message="An new version of this app is available." action={{...}} style={{...}} direction="up">
                      <SnackbarContent message="An new version of this app is available." action={{...}} style={{...}} direction="up" classes={{...}}>
                        <WithStyles(Paper) component={[Function: WithStyles]} headlineMapping={{...}} role="alertdialog" square={true} elevation={6} className="MuiSnackbarContent-root-9" style={{...}} direction="up">
                          <Paper component={[Function: WithStyles]} headlineMapping={{...}} role="alertdialog" square={true} elevation={6} className="MuiSnackbarContent-root-9" style={{...}} direction="up" classes={{...}}>
                            <WithStyles(Typography) className="MuiPaper-root-12 MuiPaper-elevation6-20 MuiSnackbarContent-root-9" headlineMapping={{...}} role="alertdialog" style={{...}} direction="up">
                              <Typography className="MuiPaper-root-12 MuiPaper-elevation6-20 MuiSnackbarContent-root-9" headlineMapping={{...}} role="alertdialog" style={{...}} direction="up" theme={{...}} classes={{...}} align="inherit" color="default" gutterBottom={false} noWrap={false} paragraph={false}>
                                <div className="MuiTypography-root-39 MuiTypography-body1-48 MuiPaper-root-12 MuiPaper-elevation6-20 MuiSnackbarContent-root-9" role="alertdialog" style={{...}} direction="up">
                                  <div className="MuiSnackbarContent-message-10">
                                    An new version of this app is available.
                                  </div>
                                  <div className="MuiSnackbarContent-action-11">
                                    <WithStyles(Button) color="secondary" size="small" onClick={[Function]}>
                                      <Button color="secondary" size="small" onClick={[Function]} classes={{...}} component="button" disabled={false} disableFocusRipple={false} fullWidth={false} mini={false} type="button" variant="text">
                                        <WithStyles(ButtonBase) className="MuiButton-root-74 MuiButton-text-76 MuiButton-textSecondary-78 MuiButton-flat-79 MuiButton-flatSecondary-81 MuiButton-sizeSmall-97" disabled={false} focusRipple={true} focusVisibleClassName="MuiButton-focusVisible-93" onClick={[Function]} component="button" type="button">
                                          <ButtonBase className="MuiButton-root-74 MuiButton-text-76 MuiButton-textSecondary-78 MuiButton-flat-79 MuiButton-flatSecondary-81 MuiButton-sizeSmall-97" disabled={false} focusRipple={true} focusVisibleClassName="MuiButton-focusVisible-93" onClick={[Function]} component="button" type="button" classes={{...}} centerRipple={false} disableRipple={false} disableTouchRipple={false} tabIndex="0">
                                            <button className="MuiButtonBase-root-100 MuiButton-root-74 MuiButton-text-76 MuiButton-textSecondary-78 MuiButton-flat-79 MuiButton-flatSecondary-81 MuiButton-sizeSmall-97" onBlur={[Function]} onFocus={[Function]} onKeyDown={[Function]} onKeyUp={[Function]} onMouseDown={[Function]} onMouseLeave={[Function]} onMouseUp={[Function]} onTouchEnd={[Function]} onTouchMove={[Function]} onTouchStart={[Function]} tabIndex="0" type="button" disabled={false} onClick={[Function]}>
                                              <span className="MuiButton-label-75">
                                                REFRESH
                                              </span>
                                              <NoSsr defer={false} fallback={{...}}>
                                                <WithStyles(TouchRipple) innerRef={[Function]} center={false}>
                                                  <TouchRipple center={false} classes={{...}}>
                                                    <TransitionGroup component="span" enter={true} exit={true} className="MuiTouchRipple-root-118" childFactory={[Function: childFactory]}>
                                                      <span className="MuiTouchRipple-root-118" />
                                                    </TransitionGroup>
                                                  </TouchRipple>
                                                </WithStyles(TouchRipple)>
                                              </NoSsr>
                                            </button>
                                          </ButtonBase>
                                        </WithStyles(ButtonBase)>
                                      </Button>
                                    </WithStyles(Button)>
                                    <WithStyles(IconButton) aria-label="Close" color="inherit" className="RSFUpdateNotification-close-1" onClick={[Function]}>
                                      <IconButton aria-label="Close" color="inherit" className="RSFUpdateNotification-close-1" onClick={[Function]} classes={{...}} disabled={false}>
                                        <WithStyles(ButtonBase) className="MuiIconButton-root-103 MuiIconButton-colorInherit-104 RSFUpdateNotification-close-1" centerRipple={true} focusRipple={true} disabled={false} aria-label="Close" onClick={[Function]}>
                                          <ButtonBase className="MuiIconButton-root-103 MuiIconButton-colorInherit-104 RSFUpdateNotification-close-1" centerRipple={true} focusRipple={true} disabled={false} aria-label="Close" onClick={[Function]} classes={{...}} component="button" disableRipple={false} disableTouchRipple={false} tabIndex="0" type="button">
                                            <button className="MuiButtonBase-root-100 MuiIconButton-root-103 MuiIconButton-colorInherit-104 RSFUpdateNotification-close-1" onBlur={[Function]} onFocus={[Function]} onKeyDown={[Function]} onKeyUp={[Function]} onMouseDown={[Function]} onMouseLeave={[Function]} onMouseUp={[Function]} onTouchEnd={[Function]} onTouchMove={[Function]} onTouchStart={[Function]} tabIndex="0" type="button" disabled={false} aria-label="Close" onClick={[Function]}>
                                              <span className="MuiIconButton-label-108">
                                                <pure(CloseIcon)>
                                                  <CloseIcon>
                                                    <WithStyles(SvgIcon)>
                                                      <SvgIcon classes={{...}} color="inherit" component="svg" fontSize="default" viewBox="0 0 24 24">
                                                        <svg className="MuiSvgIcon-root-109" focusable="false" viewBox="0 0 24 24" color={[undefined]} aria-hidden="true" role="presentation">
                                                          <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" />
                                                          <path fill="none" d="M0 0h24v24H0z" />
                                                        </svg>
                                                      </SvgIcon>
                                                    </WithStyles(SvgIcon)>
                                                  </CloseIcon>
                                                </pure(CloseIcon)>
                                              </span>
                                              <NoSsr defer={false} fallback={{...}}>
                                                <WithStyles(TouchRipple) innerRef={[Function]} center={true}>
                                                  <TouchRipple center={true} classes={{...}}>
                                                    <TransitionGroup component="span" enter={true} exit={true} className="MuiTouchRipple-root-118" childFactory={[Function: childFactory]}>
                                                      <span className="MuiTouchRipple-root-118" />
                                                    </TransitionGroup>
                                                  </TouchRipple>
                                                </WithStyles(TouchRipple)>
                                              </NoSsr>
                                            </button>
                                          </ButtonBase>
                                        </WithStyles(ButtonBase)>
                                      </IconButton>
                                    </WithStyles(IconButton)>
                                  </div>
                                </div>
                              </Typography>
                            </WithStyles(Typography)>
                          </Paper>
                        </WithStyles(Paper)>
                      </SnackbarContent>
                    </WithStyles(SnackbarContent)>
                  </Transition>
                </EventListener>
              </Slide>
            </WithTheme(Slide)>
          </div>
          <EventListener target="document" onMouseUp={[Function]} onTouchEnd={[Function]} />
        </ClickAwayListener>
      </Snackbar>
    </WithStyles(Snackbar)>
  </UpdateNotification>
</WithStyles(UpdateNotification)>
`;

exports[`UpdateNotification should render without any props 1`] = `
<WithStyles(UpdateNotification)>
  <UpdateNotification classes={{...}} message="An new version of this app is available." reloadButtonText="RELOAD">
    <WithStyles(Snackbar) open={false} autoHideDuration={6000} onClose={[Function]} message="An new version of this app is available." action={{...}}>
      <Snackbar open={false} autoHideDuration={6000} onClose={[Function]} message="An new version of this app is available." action={{...}} classes={{...}} anchorOrigin={{...}} disableWindowBlurListener={false} TransitionComponent={[Function: WithTheme]} transitionDuration={{...}} />
    </WithStyles(Snackbar)>
  </UpdateNotification>
</WithStyles(UpdateNotification)>
`;

exports[`UpdateNotification should show when moov-update-available is dispatched 1`] = `
<WithStyles(UpdateNotification)>
  <UpdateNotification classes={{...}} message="An new version of this app is available." reloadButtonText="RELOAD">
    <WithStyles(Snackbar) open={true} autoHideDuration={6000} onClose={[Function]} message="An new version of this app is available." action={{...}}>
      <Snackbar open={true} autoHideDuration={6000} onClose={[Function]} message="An new version of this app is available." action={{...}} classes={{...}} anchorOrigin={{...}} disableWindowBlurListener={false} TransitionComponent={[Function: WithTheme]} transitionDuration={{...}}>
        <ClickAwayListener onClickAway={[Function]} mouseEvent="onMouseUp" touchEvent="onTouchEnd">
          <div className="MuiSnackbar-root-2 MuiSnackbar-anchorOriginBottomCenter-4" onMouseEnter={[Function]} onMouseLeave={[Function]}>
            <EventListener target="window" onFocus={[Function]} onBlur={[Function]} />
            <WithTheme(Slide) appear={true} in={true} onEnter={[undefined]} onEntered={[undefined]} onEntering={[undefined]} onExit={[undefined]} onExited={[Function: chainedFunction]} onExiting={[undefined]} timeout={{...}} direction="up">
              <Slide theme={{...}} appear={true} in={true} onEnter={[undefined]} onEntered={[undefined]} onEntering={[undefined]} onExit={[undefined]} onExited={[Function: chainedFunction]} onExiting={[undefined]} timeout={{...}} direction="up">
                <EventListener target="window" onResize={[Function: debounced]}>
                  <Transition onEnter={[Function]} onEntering={[Function]} onExit={[Function]} onExited={[Function]} appear={true} style={{...}} in={true} onEntered={[Function: noop]} onExiting={[Function: noop]} timeout={{...}} direction="up" mountOnEnter={false} unmountOnExit={false} enter={true} exit={true}>
                    <WithStyles(SnackbarContent) message="An new version of this app is available." action={{...}} style={{...}} direction="up">
                      <SnackbarContent message="An new version of this app is available." action={{...}} style={{...}} direction="up" classes={{...}}>
                        <WithStyles(Paper) component={[Function: WithStyles]} headlineMapping={{...}} role="alertdialog" square={true} elevation={6} className="MuiSnackbarContent-root-9" style={{...}} direction="up">
                          <Paper component={[Function: WithStyles]} headlineMapping={{...}} role="alertdialog" square={true} elevation={6} className="MuiSnackbarContent-root-9" style={{...}} direction="up" classes={{...}}>
                            <WithStyles(Typography) className="MuiPaper-root-12 MuiPaper-elevation6-20 MuiSnackbarContent-root-9" headlineMapping={{...}} role="alertdialog" style={{...}} direction="up">
                              <Typography className="MuiPaper-root-12 MuiPaper-elevation6-20 MuiSnackbarContent-root-9" headlineMapping={{...}} role="alertdialog" style={{...}} direction="up" theme={{...}} classes={{...}} align="inherit" color="default" gutterBottom={false} noWrap={false} paragraph={false}>
                                <div className="MuiTypography-root-39 MuiTypography-body1-48 MuiPaper-root-12 MuiPaper-elevation6-20 MuiSnackbarContent-root-9" role="alertdialog" style={{...}} direction="up">
                                  <div className="MuiSnackbarContent-message-10">
                                    An new version of this app is available.
                                  </div>
                                  <div className="MuiSnackbarContent-action-11">
                                    <WithStyles(Button) color="secondary" size="small" onClick={[Function]}>
                                      <Button color="secondary" size="small" onClick={[Function]} classes={{...}} component="button" disabled={false} disableFocusRipple={false} fullWidth={false} mini={false} type="button" variant="text">
                                        <WithStyles(ButtonBase) className="MuiButton-root-74 MuiButton-text-76 MuiButton-textSecondary-78 MuiButton-flat-79 MuiButton-flatSecondary-81 MuiButton-sizeSmall-97" disabled={false} focusRipple={true} focusVisibleClassName="MuiButton-focusVisible-93" onClick={[Function]} component="button" type="button">
                                          <ButtonBase className="MuiButton-root-74 MuiButton-text-76 MuiButton-textSecondary-78 MuiButton-flat-79 MuiButton-flatSecondary-81 MuiButton-sizeSmall-97" disabled={false} focusRipple={true} focusVisibleClassName="MuiButton-focusVisible-93" onClick={[Function]} component="button" type="button" classes={{...}} centerRipple={false} disableRipple={false} disableTouchRipple={false} tabIndex="0">
                                            <button className="MuiButtonBase-root-100 MuiButton-root-74 MuiButton-text-76 MuiButton-textSecondary-78 MuiButton-flat-79 MuiButton-flatSecondary-81 MuiButton-sizeSmall-97" onBlur={[Function]} onFocus={[Function]} onKeyDown={[Function]} onKeyUp={[Function]} onMouseDown={[Function]} onMouseLeave={[Function]} onMouseUp={[Function]} onTouchEnd={[Function]} onTouchMove={[Function]} onTouchStart={[Function]} tabIndex="0" type="button" disabled={false} onClick={[Function]}>
                                              <span className="MuiButton-label-75">
                                                RELOAD
                                              </span>
                                              <NoSsr defer={false} fallback={{...}}>
                                                <WithStyles(TouchRipple) innerRef={[Function]} center={false}>
                                                  <TouchRipple center={false} classes={{...}}>
                                                    <TransitionGroup component="span" enter={true} exit={true} className="MuiTouchRipple-root-118" childFactory={[Function: childFactory]}>
                                                      <span className="MuiTouchRipple-root-118" />
                                                    </TransitionGroup>
                                                  </TouchRipple>
                                                </WithStyles(TouchRipple)>
                                              </NoSsr>
                                            </button>
                                          </ButtonBase>
                                        </WithStyles(ButtonBase)>
                                      </Button>
                                    </WithStyles(Button)>
                                    <WithStyles(IconButton) aria-label="Close" color="inherit" className="RSFUpdateNotification-close-1" onClick={[Function]}>
                                      <IconButton aria-label="Close" color="inherit" className="RSFUpdateNotification-close-1" onClick={[Function]} classes={{...}} disabled={false}>
                                        <WithStyles(ButtonBase) className="MuiIconButton-root-103 MuiIconButton-colorInherit-104 RSFUpdateNotification-close-1" centerRipple={true} focusRipple={true} disabled={false} aria-label="Close" onClick={[Function]}>
                                          <ButtonBase className="MuiIconButton-root-103 MuiIconButton-colorInherit-104 RSFUpdateNotification-close-1" centerRipple={true} focusRipple={true} disabled={false} aria-label="Close" onClick={[Function]} classes={{...}} component="button" disableRipple={false} disableTouchRipple={false} tabIndex="0" type="button">
                                            <button className="MuiButtonBase-root-100 MuiIconButton-root-103 MuiIconButton-colorInherit-104 RSFUpdateNotification-close-1" onBlur={[Function]} onFocus={[Function]} onKeyDown={[Function]} onKeyUp={[Function]} onMouseDown={[Function]} onMouseLeave={[Function]} onMouseUp={[Function]} onTouchEnd={[Function]} onTouchMove={[Function]} onTouchStart={[Function]} tabIndex="0" type="button" disabled={false} aria-label="Close" onClick={[Function]}>
                                              <span className="MuiIconButton-label-108">
                                                <pure(CloseIcon)>
                                                  <CloseIcon>
                                                    <WithStyles(SvgIcon)>
                                                      <SvgIcon classes={{...}} color="inherit" component="svg" fontSize="default" viewBox="0 0 24 24">
                                                        <svg className="MuiSvgIcon-root-109" focusable="false" viewBox="0 0 24 24" color={[undefined]} aria-hidden="true" role="presentation">
                                                          <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" />
                                                          <path fill="none" d="M0 0h24v24H0z" />
                                                        </svg>
                                                      </SvgIcon>
                                                    </WithStyles(SvgIcon)>
                                                  </CloseIcon>
                                                </pure(CloseIcon)>
                                              </span>
                                              <NoSsr defer={false} fallback={{...}}>
                                                <WithStyles(TouchRipple) innerRef={[Function]} center={true}>
                                                  <TouchRipple center={true} classes={{...}}>
                                                    <TransitionGroup component="span" enter={true} exit={true} className="MuiTouchRipple-root-118" childFactory={[Function: childFactory]}>
                                                      <span className="MuiTouchRipple-root-118" />
                                                    </TransitionGroup>
                                                  </TouchRipple>
                                                </WithStyles(TouchRipple)>
                                              </NoSsr>
                                            </button>
                                          </ButtonBase>
                                        </WithStyles(ButtonBase)>
                                      </IconButton>
                                    </WithStyles(IconButton)>
                                  </div>
                                </div>
                              </Typography>
                            </WithStyles(Typography)>
                          </Paper>
                        </WithStyles(Paper)>
                      </SnackbarContent>
                    </WithStyles(SnackbarContent)>
                  </Transition>
                </EventListener>
              </Slide>
            </WithTheme(Slide)>
          </div>
          <EventListener target="document" onMouseUp={[Function]} onTouchEnd={[Function]} />
        </ClickAwayListener>
      </Snackbar>
    </WithStyles(Snackbar)>
  </UpdateNotification>
</WithStyles(UpdateNotification)>
`;
